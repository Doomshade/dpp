p -> asd = '0';
pp -> testt = 1 + 2 * 3 * 3;
pp -> test = 1 + 2 + 3*200000;
pp -> b = 1 + 2 + 3*6;
pp -> test0 = 0;
# TODO: Add an expression for this.
# p -> a = 'a';
# yarn -> asd = "0000";

FUNc test(par: pp) -> pp {
    pp -> test0 = 69 + 40000;
    pp -> test1 = testt + 50000;
    pp -> test2 = test0 + test1;
    bye test2;
}

FUNc fibonacci(num: pp) -> pp {
    if (num == 1) {
        bye 1;
    }
    bye fibonacci(num - 1);
}

FUNc testt() -> pp {
    pp -> testt0 = 111;
    bye testt0;
}

FUNc main() -> pp {
    pp -> main0 = test + 120000;
    pp -> main1 = main0 + 4;
    testt();
    pp -> main3 = testt();
    pp -> main4 = test(123);
    pp -> i = 10;
    while (i > 0) {
        i = i - 1;
    }

    i = 3;
    if (i == 0) {
        i = 69;
    } else if (i == 1) {
        i = 420;
    } else if (i == 2) {
        i = 123;
    } else {
        i = 0;
    }

    test(i);
    pp -> main5;
    pp -> main6 = 0;
    pp -> main7;

    pp -> main8 = main3 + 4321;
    pp -> main9 = main8 + 54321;
    bye i;
    # bye 123 + testt() + 5 + testt;
}
pp -> c = 456789;
# FUNc main(argc: pp, argv: yarn) -> pp {
#     pprintln(test);
#     pprintln(asd);
#     bye 0;
# }
